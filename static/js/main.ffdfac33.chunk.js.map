{"version":3,"sources":["components/InputBox.jsx","components/PageContent.jsx","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","className","type","min","id","onChange","onHandleInput","placeholder","PageContent","passages","App","handleFetchRequest","setState","isLoading","url","state","paragraphs","fetch","then","res","json","data","results","handleInput","e","target","value","handleResultsDisplay","map","paragraph","index","key","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAUeA,MARf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,aACb,2BAAOC,KAAK,SAASC,IAAK,EAAGC,GAAG,QAAQC,SAAUL,EAAMM,cAAeC,YAAY,iC,MCO1EC,MAVf,SAAqBR,GACnB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,YACb,2BAAID,EAAMS,aC6DHC,E,YA7Db,aAAe,IAAD,8BACZ,+CAYFC,mBAAqB,WACnB,EAAKC,SAAS,CAAEC,WAAW,IAC3B,IAAMC,EAAG,iEAA6D,EAAKC,MAAMC,YACjFC,MAAMH,GACHI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CACZU,QAASD,EACTR,WAAW,QArBL,EA0BdU,YAAc,SAAAC,GACZ,EAAKZ,SAAS,CAAEI,WAAYQ,EAAEC,OAAOC,QAAS,kBAC5C,EAAKf,yBA5BK,EAgCdgB,qBAAuB,WACrB,OAA6B,IAAzB,EAAKZ,MAAMF,UAEX,yBAAKZ,UAAU,YACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,kBAGd,EAAKc,MAAMO,QAAQM,KAAI,SAACC,EAAWC,GAAZ,OAC5B,kBAAC,EAAD,CAAarB,SAAUoB,EAAWE,IAAKD,QA3CzC,EAAKf,MAAQ,CACXC,WAAY,EACZH,WAAW,EACXS,QAAS,IALC,E,iFAUZU,KAAKrB,uB,+BAwCL,OACE,yBAAKV,UAAU,aACb,oDACA,uBAAGG,GAAG,WAAN,+BACA,kBAAC,EAAD,CAAUE,cAAe0B,KAAKT,cAC9B,wCAAIS,KAAKL,6B,GAxDCM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.ffdfac33.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction InputBox(props) {\r\n  return (\r\n    <div className=\"input-box\">\r\n      <input type=\"number\" min={1} id=\"input\" onChange={props.onHandleInput} placeholder=\"Type number to generate...\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputBox;\r\n","import React from \"react\";\r\n\r\nfunction PageContent(props) {\r\n  return (\r\n    <div className=\"page-content\">\r\n      <div className=\"passages\">\r\n        <p>{props.passages}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PageContent;\r\n","import React, { Component } from \"react\";\nimport InputBox from \"./components/InputBox\";\nimport \"./App.css\";\nimport PageContent from \"./components/PageContent\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      paragraphs: 2,\n      isLoading: true,\n      results: []\n    };\n  }\n\n  componentDidMount() {\n    this.handleFetchRequest();\n  }\n\n  handleFetchRequest = () => {\n    this.setState({ isLoading: true });\n    const url = `https://baconipsum.com/api/?type=meat-and-filler&paras=${this.state.paragraphs}`;\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          results: data,\n          isLoading: false\n        });\n      });\n  };\n\n  handleInput = e => {\n    this.setState({ paragraphs: e.target.value }, () =>\n      this.handleFetchRequest()\n    );\n  };\n\n  handleResultsDisplay = () => {\n    if (this.state.isLoading === true)\n      return (\n        <div className=\"sk-chase\">\n          <div className=\"sk-chase-dot\"></div>\n          <div className=\"sk-chase-dot\"></div>\n          <div className=\"sk-chase-dot\"></div>\n          <div className=\"sk-chase-dot\"></div>\n          <div className=\"sk-chase-dot\"></div>\n          <div className=\"sk-chase-dot\"></div>\n        </div>\n      );\n    return this.state.results.map((paragraph, index) => (\n      <PageContent passages={paragraph} key={index} />\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Dummy Text Generator</h1>\n        <p id=\"tagline\">Real time text generation !</p>\n        <InputBox onHandleInput={this.handleInput} />\n        <> {this.handleResultsDisplay()}</>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}